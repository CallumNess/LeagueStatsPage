// <auto-generated />
using System;
using LeagueStatsPage.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace LeagueStatsPage.Migrations
{
    [DbContext(typeof(LeagueStatsPageContext))]
    [Migration("20200422151708_NewTeams")]
    partial class NewTeams
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.11-servicing-32099")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("LeagueStatsPage.Models.PlayerDetails", b =>
                {
                    b.Property<int>("PlayerDetailsID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Age");

                    b.Property<DateTime>("DOB");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Name");

                    b.Property<string>("Nationality");

                    b.Property<DateTime>("StartDate");

                    b.Property<int>("TeamsId");

                    b.HasKey("PlayerDetailsID");

                    b.HasIndex("TeamsId");

                    b.ToTable("PlayerDetails");
                });

            modelBuilder.Entity("LeagueStatsPage.Models.Teams", b =>
                {
                    b.Property<int>("TeamsID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("TeamName");

                    b.HasKey("TeamsID");

                    b.ToTable("Teams");

                    b.HasData(
                        new { TeamsID = 1, TeamName = "G2 Esports" },
                        new { TeamsID = 2, TeamName = "Excel Esports" },
                        new { TeamsID = 3, TeamName = "FC Schalke 04 Esports" },
                        new { TeamsID = 4, TeamName = "Fnatic" },
                        new { TeamsID = 5, TeamName = "MAD Lions" },
                        new { TeamsID = 6, TeamName = "Misfits Gaming" },
                        new { TeamsID = 7, TeamName = "Origen" },
                        new { TeamsID = 8, TeamName = "Rogue" },
                        new { TeamsID = 9, TeamName = "SK Gaming" },
                        new { TeamsID = 10, TeamName = "Team Vitality" },
                        new { TeamsID = 11, TeamName = "100 Thieves" },
                        new { TeamsID = 12, TeamName = "Cloud 9" },
                        new { TeamsID = 13, TeamName = "CLG" },
                        new { TeamsID = 14, TeamName = "Dignitas" },
                        new { TeamsID = 15, TeamName = "Evil Geniuses" },
                        new { TeamsID = 16, TeamName = "FlyQuest" },
                        new { TeamsID = 17, TeamName = "Golden Guardians" },
                        new { TeamsID = 18, TeamName = "Immortals" },
                        new { TeamsID = 19, TeamName = "Team Liquid" },
                        new { TeamsID = 20, TeamName = "Team SoloMid" },
                        new { TeamsID = 21, TeamName = "Afreeca Freecs" },
                        new { TeamsID = 22, TeamName = "APK Prince" },
                        new { TeamsID = 23, TeamName = "DAMWON Gaming" },
                        new { TeamsID = 24, TeamName = "DragonX" },
                        new { TeamsID = 25, TeamName = "Gen.G" },
                        new { TeamsID = 26, TeamName = "Griffin" },
                        new { TeamsID = 27, TeamName = "Hanwha Life" },
                        new { TeamsID = 28, TeamName = "KT Rolster" },
                        new { TeamsID = 29, TeamName = "SANDBOX Gaming" },
                        new { TeamsID = 30, TeamName = "T1" },
                        new { TeamsID = 31, TeamName = "Bilibili Gaming" },
                        new { TeamsID = 32, TeamName = "Dominus Esports" },
                        new { TeamsID = 33, TeamName = "EDward Gaming" },
                        new { TeamsID = 34, TeamName = "eStar" },
                        new { TeamsID = 35, TeamName = "FunPlus Phoenix" },
                        new { TeamsID = 36, TeamName = "Invictus Gaming" },
                        new { TeamsID = 37, TeamName = "JD Gaming" },
                        new { TeamsID = 38, TeamName = "LGD Gaming" },
                        new { TeamsID = 39, TeamName = "LNG Esports" },
                        new { TeamsID = 40, TeamName = "Oh My God" },
                        new { TeamsID = 41, TeamName = "Rogue Warriors" },
                        new { TeamsID = 42, TeamName = "RNG" },
                        new { TeamsID = 43, TeamName = "Suning" },
                        new { TeamsID = 44, TeamName = "Team WE" },
                        new { TeamsID = 45, TeamName = "Top Esports" },
                        new { TeamsID = 46, TeamName = "Vici Gaming" },
                        new { TeamsID = 47, TeamName = "Victory Five" }
                    );
                });

            modelBuilder.Entity("LeagueStatsPage.Models.Tournament", b =>
                {
                    b.Property<int>("TournamentID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("TournamentName");

                    b.HasKey("TournamentID");

                    b.ToTable("Tournaments");

                    b.HasData(
                        new { TournamentID = 1, TournamentName = "LEC" },
                        new { TournamentID = 2, TournamentName = "LCS" },
                        new { TournamentID = 5, TournamentName = "LCK" },
                        new { TournamentID = 6, TournamentName = "LPL" },
                        new { TournamentID = 4, TournamentName = "MSI" },
                        new { TournamentID = 3, TournamentName = "Worlds" }
                    );
                });

            modelBuilder.Entity("LeagueStatsPage.Models.TournamentTeam", b =>
                {
                    b.Property<int>("TournamentID");

                    b.Property<int>("TeamsID");

                    b.HasKey("TournamentID", "TeamsID");

                    b.HasIndex("TeamsID");

                    b.ToTable("TournamentTeams");
                });

            modelBuilder.Entity("LeagueStatsPage.Models.PlayerDetails", b =>
                {
                    b.HasOne("LeagueStatsPage.Models.Teams", "Team")
                        .WithMany()
                        .HasForeignKey("TeamsId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LeagueStatsPage.Models.TournamentTeam", b =>
                {
                    b.HasOne("LeagueStatsPage.Models.Teams", "Teams")
                        .WithMany("TournamentTeams")
                        .HasForeignKey("TeamsID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LeagueStatsPage.Models.Tournament", "Tournament")
                        .WithMany("TournamentTeams")
                        .HasForeignKey("TournamentID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
